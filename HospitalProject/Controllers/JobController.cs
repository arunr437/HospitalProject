
using System;
using System.Linq;
using System.Data.SqlClient;
using System.Data.Entity;
using System.Diagnostics;
using System.Web;
using System.Web.Mvc;
using System.IO;
using HospitalProject.Data;
using HospitalProject.Models;
using System.Collections.Generic;
using HospitalProject.Models.ViewModels;

namespace HospitalProject.Controllers
{
    public class JobController : Controller
    {
        // GET: Job
        public ActionResult Index()
        {


                return RedirectToAction("ListJobsAdmin");

        }

        //Creating a db object of the Hospital Context file. 
        private HospitalContext db = new HospitalContext();


        // GET: Function is used to fetch the Job details that will be displayed in the Apply Job Admin page. 
        public ActionResult ApplyJobAdmin(int id)
        {
            Debug.WriteLine("Applying Jobs...");

            //This query gets the job details for the speicfic job. 
            string query = "select * from Jobs where JobId = @JobId";
            Job job = db.Jobs.SqlQuery(query, new SqlParameter("@JobId", id)).FirstOrDefault();


            return View(job);
        }

        //POST: This function is used to add the Applicant details in to the Application table for the Admin 
        [HttpPost]
        public ActionResult ApplyJobAdmin(string firstName, string lastName, string emailId, string coverLetter, string jobId, HttpPostedFileBase resume)
        {
            Debug.WriteLine("Entered Apply Job Admin : POST");
            Debug.WriteLine(firstName + lastName + emailId + coverLetter + jobId);

            string newFileName = "";
            string extension = "";

            //Logic for Resume Upload by the applicant. 
            //If the resume has not been uploaded, the below block will be skipped
            if (resume != null)
            {
                Debug.WriteLine("File exists");

                //Below logic checks the "Content/Resume" folder and creates a new file name based on the current file names
                var directory = new DirectoryInfo(Server.MapPath("~/Content/resume/"));
                Debug.WriteLine("Directory Path: " + directory.ToString());

                //If there are no files in the folder, the file name is "1Resume", otherwise a new filename is generated by adding 1 to the last file name
                if (Directory.GetFiles(directory.ToString()).Length == 0)
                {
                    Debug.WriteLine("No files exist. Inserting first file into the directory");
                    newFileName = "Resume1";
                }
                else
                {
                    //This line gets the last inserted file by ordering the all the files into descending order by insert time, and getting the first file.
                    var myFile = directory.GetFiles().OrderByDescending(f => f.LastWriteTime).First();
                    //Gets filename without the file extension
                    string fileName = Path.GetFileNameWithoutExtension(myFile.Name);
                    //Gets the last added file number and adds 1 to it. This will be the new file number
                    int resumeNumber = Int32.Parse(fileName.Substring(0, fileName.IndexOf('R'))) + 1;
                    //The new file name is below
                    newFileName = resumeNumber + "Resume";
                    Debug.WriteLine("New File Name:" + newFileName);
                }

                //checking to see if the file size is greater than 0 (bytes)
                if (resume.ContentLength > 0)
                {
                    Debug.WriteLine("Resume present");

                    var valtypes = new[] { ".pdf", ".doc", ".docx" };
                    extension = Path.GetExtension(resume.FileName);
                    Debug.WriteLine("File extension:" + extension);
                    if (valtypes.Contains(extension))
                    {
                        try
                        {
                            Debug.WriteLine(directory);
                            //Saving the file
                            Debug.WriteLine("Writing the fil:e " + directory.ToString() + newFileName + extension);
                            resume.SaveAs(directory.ToString() + newFileName + extension);
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("Eror in uploading file");
                            Debug.WriteLine("Exception:" + ex);
                        }
                    }
                }
            }


            //Query to create a new Application
            string query = "insert into Applications (firstName,lastName,emailId,coverLetter,jobId,resume) values (@firstName,@lastName,@emailId,@coverLetter,@jobId,@resume)";
            SqlParameter[] sqlParams = new SqlParameter[6];
            sqlParams[0] = new SqlParameter("@firstName", firstName);
            sqlParams[1] = new SqlParameter("@lastName", lastName);
            sqlParams[2] = new SqlParameter("@emailId", emailId);
            sqlParams[3] = new SqlParameter("@coverLetter", coverLetter);
            sqlParams[4] = new SqlParameter("@jobId", jobId);
            sqlParams[5] = new SqlParameter("@resume",  newFileName + extension);
            Debug.WriteLine("File:" + "/" + newFileName + extension);

            db.Database.ExecuteSqlCommand(query, sqlParams);

            //Redirecting the control back to list jobs. 
            return RedirectToAction("ListJobsAdmin");
        }

        //This method is used to get the list of Jobs for the admin
        public ActionResult ListJobsAdmin(string searchKey, int pageNum = 0)
        {
            Debug.WriteLine("Entered ListJobsAdmin..");
            Debug.WriteLine("Entered Search key is" + searchKey);

            //Query to get the list of jobs
            string query = "select * from jobs";

            //Code to implement Search Box feature
            if (searchKey!=null)
            {
                query = query + " where name like '%" + searchKey + "%'";

            }
            List<Job> jobs = db.Jobs.SqlQuery(query).ToList();


            /****************************************************************************************************************************************************
                Pagination code cited from below source: 
                Author: Christine Bittle
                Site: https://github.com/christinebittle/PetGroomingMVC/blob/master/PetGrooming/Controllers/PetController.cs
                Purpose: Pagination Algorithm for List. 
            ***************************************************************************************************************************************************--*/
            int recordsPerPage = 5;
            int JobCount = jobs.Count();

            //Below line calculates the number of pages needed in pagination
            int maxPage = (int)Math.Ceiling((decimal)JobCount / recordsPerPage) - 1;
            if (maxPage < 0) maxPage = 0;
            if (pageNum < 0) pageNum = 0;
            if (pageNum > maxPage) pageNum = maxPage;
            int start = (int)(recordsPerPage * pageNum);
            ViewData["pageNum"] = pageNum;
            ViewData["pageSummary"] = "";

            //If number of pages greater than 0 the below code will execute
            if (maxPage > 0)
            {
                //Below line calculates the current page number in pagination
                ViewData["pageSummary"] = (pageNum + 1) + " of " + (maxPage + 1);
                List<SqlParameter> newparams = new List<SqlParameter>();

                if (searchKey != "")
                {
                    newparams.Add(new SqlParameter("@searchkey", "%" + searchKey + "%"));
                    ViewData["searchKey"] = searchKey;
                }
                newparams.Add(new SqlParameter("@start", start));
                newparams.Add(new SqlParameter("@perpage", recordsPerPage));
                string currentQuery = query + " order by jobId offset @start rows fetch first @perpage rows only ";
                jobs = db.Jobs.SqlQuery(currentQuery, newparams.ToArray()).ToList();
            }
            /************************************************************************************************************************************************
             * End of Pagination Algorithm 
             ***********************************************************************************************************************************************/
            return View(jobs);
        }


        // GET: Function is used to call the view that will display the Add form
        public ActionResult AddJobAdmin()
        {
            Debug.WriteLine("Adding new Jobs...");
            return View();
        }

        //POST: Method to get the values from the Add Job form and insert it into the database for the Admin
        [HttpPost]
        public ActionResult AddJobAdmin(string name, string skill, string description, string type, string salary)
        {
            Debug.WriteLine("Adding a new job");
            Debug.WriteLine(name + description + skill + description + type + salary);

            //Query to create a new Job Post
            string query = "insert into Jobs (name,skill,description,type,salary) values (@name,@skill,@description,@type,@salary)";
            SqlParameter[] sqlParams = new SqlParameter[5];
            sqlParams[0] = new SqlParameter("@name", name);
            sqlParams[1] = new SqlParameter("@skill", skill);
            sqlParams[2] = new SqlParameter("@description", description);
            sqlParams[3] = new SqlParameter("@type", type);
            sqlParams[4] = new SqlParameter("@salary", salary);
            db.Database.ExecuteSqlCommand(query, sqlParams);

            //Redirecting the control back to list jobs. 
            return RedirectToAction("ListJobsAdmin");
        }

        //GET: Function to get the specific Job deatils and Show the List of applications for that job. This is for the Admin.  
        public ActionResult ShowJobAdmin(int id)
        {
            Debug.WriteLine("Entering Show Job");
            Debug.WriteLine("Entered Job ID is:" + id);

            //This query gets the job with the specified jobId
            string query = "select * from Jobs where JobId = @JobId";
            Job job = db.Jobs.SqlQuery(query, new SqlParameter("@JobId", id)).FirstOrDefault();

            //This query is used to get the list of applications that have been done for the specific job. 
            query = "select * from Applications where JobId = @JobId";
            List<Application> applications = db.Applications.SqlQuery(query, new SqlParameter("@JobId", job.jobId)).ToList();

            //The below View Model is used to store the Job Details and the list of applications that have been made for the specific job. 
            JobApplications jobApplications = new JobApplications();
            jobApplications.job = job;
            jobApplications.applicantionList = applications;

            //Returning the JobApplications ViewModel object to the Show Job Admin view. 
            return View(jobApplications);
        }


        //GET: This function is used to fetch the data that will be displayed in the Update Job form for the admin. 
        public ActionResult UpdateJobAdmin(int id)
        {
            Debug.WriteLine("Entering Update Job");
            Debug.WriteLine("Fetching data to be displayed in the update job page");

            //Query to get the job Details with specific jobId id. 
            string query = "select * from Jobs where JobId = @jobId";
            Job job = db.Jobs.SqlQuery(query, new SqlParameter("@jobId", id)).FirstOrDefault();

            //Calling the job view with the Specific job details
            return View(job);
        }

        //POST: This function is used to Update the Job table with the updated data entered in the update page form for the Admin. 
        [HttpPost]
        public ActionResult UpdateJobAdmin(int? id, string name, string skill, string description, string type, int salary)
        {
            Debug.WriteLine("Updating job " + id);
            Debug.WriteLine("Updating the data entered in the form to the Job table ");

            //Query to update the job details into the Job table
            string query = "update Jobs set name = @name, skill = @skill,description = @description,  type = @type, salary=@salary where JobId = @jobId";
            SqlParameter[] sqlParams = new SqlParameter[6];
            sqlParams[0] = new SqlParameter("@name", name);
            sqlParams[1] = new SqlParameter("@skill", skill);
            sqlParams[2] = new SqlParameter("@description", description);
            sqlParams[3] = new SqlParameter("@type", type);
            sqlParams[4] = new SqlParameter("@salary", salary);
            sqlParams[5] = new SqlParameter("@jobId", id);
            db.Database.ExecuteSqlCommand(query, sqlParams);

            //Redirecting the control back to the List Jobs Admin view. 
            return RedirectToAction("ListJobsAdmin");
        }

        //GET: Function to delete a job in the Job table. 
        public ActionResult DeleteJobAdmin(int id)
        {
            Debug.WriteLine("Deleting Jobs with the ID: ");
            Debug.WriteLine(id);

            //Query to delete the job with the specific jobId id
            string query = "delete from Jobs where JobId = @JobId";
            Debug.WriteLine(query);
            SqlParameter[] sqlParams = new SqlParameter[1];
            sqlParams[0] = new SqlParameter("@JobId", id);
            db.Database.ExecuteSqlCommand(query, sqlParams);

            //Redirecting the control back to List Jobs view. 
            return RedirectToAction("ListJobsAdmin");
        }


        //GET: Function to get the list of Jobs for the User
        public ActionResult ListJobs(string searchKey,int pageNum=0)
        {
            Debug.WriteLine("Entered ListJobs..");
            Debug.WriteLine("Entered Search key is" + searchKey);

            //Query to get the list of jobs
            string query = "select * from jobs";

            if (searchKey != null)
            {
                query = query + " where name like '%" + searchKey + "%'";

            }

            List<Job> jobs = db.Jobs.SqlQuery(query).ToList();

            /****************************************************************************************************************************************************
                Pagination code cited from below source: 
                Author: Christine Bittle
                Site: https://github.com/christinebittle/PetGroomingMVC/blob/master/PetGrooming/Controllers/PetController.cs
                Purpose: Pagination Algorithm for List. 
            ***************************************************************************************************************************************************--*/
            int recordsPerPage = 5;
            int JobCount = jobs.Count();

            //Below line calculates the number of pages needed in pagination
            int maxPage = (int)Math.Ceiling((decimal)JobCount / recordsPerPage) - 1;
            if (maxPage < 0) maxPage = 0;
            if (pageNum < 0) pageNum = 0;
            if (pageNum > maxPage) pageNum = maxPage;
            int start = (int)(recordsPerPage * pageNum);
            ViewData["pageNum"] = pageNum;
            ViewData["pageSummary"] = "";

            //If number of pages greater than 0 the below code will execute
            if (maxPage > 0)
            {
                //Below line calculates the current page number in pagination
                ViewData["pageSummary"] = (pageNum + 1) + " of " + (maxPage + 1);
                List<SqlParameter> newparams = new List<SqlParameter>();

                if (searchKey != "")
                {
                    newparams.Add(new SqlParameter("@searchkey", "%" + searchKey + "%"));
                    ViewData["searchKey"] = searchKey;
                }
                newparams.Add(new SqlParameter("@start", start));
                newparams.Add(new SqlParameter("@perpage", recordsPerPage));
                string currentQuery = query + " order by jobId offset @start rows fetch first @perpage rows only ";
                jobs = db.Jobs.SqlQuery(currentQuery, newparams.ToArray()).ToList();
            }
            /************************************************************************************************************************************************
             * End of Pagination Algorithm 
             ***********************************************************************************************************************************************/
            return View(jobs);
        }

        //GET: Function to get the specific Job details. 
        public ActionResult ShowJob(int id)
        {
            Debug.WriteLine("Entering Show Job");
            Debug.WriteLine("Entered Job ID is:" + id);

            //This query gets the job with the specified jobId
            string query = "select * from Jobs where JobId = @JobId";
            Job job = db.Jobs.SqlQuery(query, new SqlParameter("@JobId", id)).FirstOrDefault();

            //Query to get the list of applications. This will not be displayed for the User. 
            query = "select * from Applications where JobId = @JobId";
            List<Application> applications = db.Applications.SqlQuery(query, new SqlParameter("@JobId", job.jobId)).ToList();

            //Adding the above queries to the viewmodel 
            JobApplications jobApplications = new JobApplications();
            jobApplications.job = job;
            jobApplications.applicantionList = applications;

            //Returning the ShowJobPost ViewModel object to the ShowJob view. 
            return View(jobApplications);
        }

        // GET: Function is used to fetch the job details data that will be displayed in the ApplyJob page. 
        public ActionResult ApplyJob(int id)
        {
            Debug.WriteLine("Applying Jobs...");

            //This query gets the job details for the speicfic job. 
            string query = "select * from Jobs where JobId = @JobId";
            Job job = db.Jobs.SqlQuery(query, new SqlParameter("@JobId", id)).FirstOrDefault();

            return View(job);
        }

        //POST: Method to get the values from the Apply job form for the user
        [HttpPost]
        public ActionResult ApplyJob(string firstName, string lastName, string emailId, string coverLetter, string jobId, HttpPostedFileBase resume)
        {
            Debug.WriteLine("Entered Apply Job  : POST");
            Debug.WriteLine(firstName + lastName + emailId + coverLetter + jobId);
            string newFileName = "";
            string extension = "";

            //Logic for file upload
            //If resume is not uploaded this block will be skipped
            if (resume != null)
            {
                Debug.WriteLine("File exists");
                //Below logic checks the "Content/Resume" folder and creates a new file name based on the current file names
                var directory = new DirectoryInfo(Server.MapPath("~/Content/resume/"));
                Debug.WriteLine("Directory Path: " + directory.ToString());
                //If there are no files in the folder, the file name is "1Resume", otherwise a new filename is generated by adding 1 to the last file name
                if (Directory.GetFiles(directory.ToString()).Length == 0)
                {
                    Debug.WriteLine("No files exist. Inserting first file into the directory");
                    newFileName = "1Resume";
                }
                else
                {
                    //This line gets the last inserted file by ordering the all the files into descending order by insert time, and getting the first file.
                    var myFile = directory.GetFiles().OrderByDescending(f => f.LastWriteTime).First();
                    //Gets filename without the file extension
                    string fileName = Path.GetFileNameWithoutExtension(myFile.Name);
                    //Gets the last file number and adds 1 to it. This will be the new file number
                    int resumeNumber = Int32.Parse(fileName.Substring(0, fileName.IndexOf('R'))) + 1;
                    //The new file name is below
                    newFileName = resumeNumber+"Resume";
                    Debug.WriteLine("New File Name:" + newFileName);
                }

                //checking to see if the file size is greater than 0 (bytes)
                if (resume.ContentLength > 0)
                {
                    Debug.WriteLine("Resume present");

                    var valtypes = new[] { ".pdf", ".doc", ".docx" };
                    extension = Path.GetExtension(resume.FileName);
                    Debug.WriteLine("File extension:" + extension);
                    if (valtypes.Contains(extension))
                    {
                        try
                        {
                            Debug.WriteLine(directory);
                            //Saving the file
                            resume.SaveAs(directory.ToString() + newFileName + extension);

                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine("Eror in uploading file");
                            Debug.WriteLine("Exception:" + ex);
                        }

                    }
                }
            }

            //Query to create a new Application
            string query = "insert into Applications (firstName,lastName,emailId,coverLetter,jobId,resume) values (@firstName,@lastName,@emailId,@coverLetter,@jobId,@resume)";
            SqlParameter[] sqlParams = new SqlParameter[6];
            sqlParams[0] = new SqlParameter("@firstName", firstName);
            sqlParams[1] = new SqlParameter("@lastName", lastName);
            sqlParams[2] = new SqlParameter("@emailId", emailId);
            sqlParams[3] = new SqlParameter("@coverLetter", coverLetter);
            sqlParams[4] = new SqlParameter("@jobId", jobId);
            sqlParams[5] = new SqlParameter("@resume", newFileName+extension);
            db.Database.ExecuteSqlCommand(query, sqlParams);

            //Redirecting the control back to list jobs. 
            return RedirectToAction("ListJobs");
        }
    }
}
